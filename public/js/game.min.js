function genGray(percent) {
	percent = (100 - percent)/100;
	var val = Math.round(255 * percent);
	return 'rgb(' + val + ',' + val + ',' + val + ')';
}

var CapColors = {
	white		: genGray(0),
	gray10		: genGray(10),
	gray20		: genGray(20),
	gray30		: genGray(30),
	gray40		: genGray(40),
	gray50		: genGray(50),
	gray60		: genGray(60),
	gray70		: genGray(70),
	gray80		: genGray(80),
	gray90		: genGray(90),
	black		: genGray(100)
};

/* **********************************************
     Begin Player.js
********************************************** */

var player,
	remotePlayers;

var Player = function(id, username) {
	this.id = id;
	this.username = username;
	this.team = "";
	this.entity = null;
};

player = new Player();

/* **********************************************
     Begin eventHandlers.js
********************************************** */

/* global Game:true, Crafty, io, Player, player, remotePlayers */

var socket;

// Socket connected
function onSocketConnected() {
	console.log("Connected to socket server");
}

// Socket disconnected
function onSocketDisconnect() {
	console.log("Disconnected from socket server");
}

function addToWaitingRoom(player, cssClass) {
	$('#waiting-room li#player-' + player.id).remove();

	var listItem = "";
	listItem += '<li id="player-' + player.id + '"' + (cssClass ? ' class="'+cssClass+'"' : "") + '>';
	listItem += player.username;
	listItem += '</li>';

	$('#waiting-room ul#team-'+player.team).append(listItem);
}

// New player
function onNewPlayer(data) {

	// Initialise the new player
	console.log("New player connected: " + data.id);
	var newPlayer = new Player(data.id, data.name);

	if(data.team) {
		newPlayer.team = data.team;
		addToWaitingRoom(newPlayer);
	}

	// Add new player to the remote players array
	remotePlayers[data.id] = newPlayer;
}

// Remove player
function onRemovePlayer(data) {
	var player = remotePlayers[data.id];

	// Player not found
	if (!player) {
		console.log("Player not found: "+data.id);
		return;
	}

	// remove player from waiting room
	$('#waiting-room li#player-' + player.id).remove();

	// Remove player from array
	delete remotePlayers[data.id];
}

function onIdAssignment(data) {
	console.log("Assigning player to ID " + data.id);
	player.id = data.id;
}

function onTeamAssignment(data) {

	var player = remotePlayers[data.id];

	// Player not found
	if (!player) {
		console.log("Player not found: "+data.id);
		return;
	}

	player.team = data.team;
	console.log(player.username + " assigned to: " + player.team);

	// add player to waiting room
	addToWaitingRoom(player);

}

function onWaitingMessage(data) {
	$('#waiting-room #waiting-msg').text(data);
}

function onStartGame(data) {
	console.log("Starting game!");
	Crafty.scene('Game');
}

function onGameInProgress(data) {
	Crafty.scene('GameInProgress');
}

function addChatMsg(msg, username) {
	var chatBox = $('#chat-msgs');
	chatBox.append("<br />" + username + ": " + msg);
	chatBox.scrollTop(chatBox.get(0).scrollHeight);
}

function onChatMsg(data) {
	addChatMsg(data.msg, data.username);
}

function onMove(data) {
	var player = remotePlayers[data.id];
	player.entity.x = data.x;
	player.entity.y = data.y;
}

function setEventHandlers() {

	// Socket connection successful
	socket.on("connect", onSocketConnected);

	// Socket disconnection
	socket.on("disconnect", onSocketDisconnect);

	// New player message received
	socket.on("new player", onNewPlayer);

	// Player removed message received
	socket.on("remove player", onRemovePlayer);

	// ID assignment
	socket.on("id assignment", onIdAssignment);

	// Team assignment
	socket.on("team assignment", onTeamAssignment);

	// Waiting message update
	socket.on("waiting msg", onWaitingMessage);

	// Game start!
	socket.on("start game", onStartGame);

	// Game in progress
	socket.on("game in progress", onGameInProgress);

	// Chat messages
	socket.on("chat msg", onChatMsg);

	// Player movements
	socket.on("move", onMove);

}

/* **********************************************
     Begin maps.js
********************************************** */

/* global Crafty */

var Maps = {

	map1: function() {

		// create an Obstacle at position (12, 12) with a width of 10 tiles and a height of 1 tile
		Crafty.e('Obstacle').at(18, 18).setSize(10, 1);

		// create a Safe Zone at position (30, 10) with a width of 2 tiles and a height of 2 tiles
		Crafty.e('SafeZone').at(30, 10).setSize(2, 2);

	}

};

/* **********************************************
     Begin game.js
********************************************** */

/* global Game:true, Crafty, io, socket:true, Player, player, remotePlayers:true */

//@codekit-prepend 'colors.js', 'Player.js', 'eventHandlers.js', 'maps.js'
//@codekit-append 'components.js', 'scenes.js'

var mapDesignMode = false;

Game = {

	map_grid : {
		width:  80,
		height: 25,
		tile: {
			width:  16,
			height: 16
		}
	},

	start: function() {

		var viewportWidth, viewportHeight;

		// set the visible area on the screen
		if(mapDesignMode) {
			viewportWidth = Game.map_grid.tile.width * Game.map_grid.width;
			viewportHeight = Game.map_grid.tile.height * Game.map_grid.height;
		} else {
			viewportWidth = 480;
			viewportHeight = 320;
		}

		Crafty.init(viewportWidth, viewportHeight);
		Crafty.viewport.init(viewportWidth, viewportHeight);

		// add a background color to the whole project
		Crafty.background(CapColors.gray30);

		// set the starting scene
		if(mapDesignMode) {
			Crafty.scene('Game');
		} else {
			Crafty.scene('Start');
		}

		// Initialise socket connection
		socket = io.connect("http://localhost", {port: 8000, transports: ["websocket"]});

		// Initialise remote players array
		remotePlayers = {};

		// clear list items from previous game
		$('#waiting-room li').remove();

		// Start listening for events
		setEventHandlers();

	}

};

$(document).ready(function() {
	Game.start();
});

/* **********************************************
     Begin components.js
********************************************** */

/* global _, Game:true, Crafty, io, socket:true, Player, player, remotePlayers:true, CapColors */

Crafty.c('Grid', {

	init: function() {
		this.attr({
			w: Game.map_grid.tile.width,
			h: Game.map_grid.tile.height
		});
	},

	// Locate this entity at the given position on the grid
	at: function(x, y) {
		if (x === undefined && y === undefined) {
			return {
				x: this.x/Game.map_grid.tile.width,
				y: this.y/Game.map_grid.tile.height
			};
		} else {
			this.attr({
				x: x * Game.map_grid.tile.width,
				y: y * Game.map_grid.tile.height
			});
			return this;
		}
	},

	setSize: function(width, height) {

		this.attr({
			w: Game.map_grid.tile.width * width,
			h: Game.map_grid.tile.height * height
		});

		return this;

	}

});

Crafty.c('StageBg', {
	init: function() {
		this.requires('2D, Canvas, Color, Grid')
			.color(CapColors.gray20)
			.attr({
				w: (Game.map_grid.tile.width * Game.map_grid.width) / 2,
				h: Game.map_grid.tile.height * Game.map_grid.height
			});
	}
});

Crafty.c('Actor', {
	init: function() {
		this.requires('2D, Canvas');
	}
});

Crafty.c('Edge', {

	init: function() {
		this.requires('Actor, Solid, Color, Grid, Solid')
			.color('black')
			.attr({
				z: 3
			});
	}

});

Crafty.c('Obstacle', {

	init: function() {
		this.requires('Edge')
			.setSize(1, 1);
	}

});

Crafty.c('SafeZone', {

	init: function() {
		this.requires('Actor, Color, Grid')
			.color(CapColors.gray50)
			.attr({
				z: 1
			});
	}

});

Crafty.c('Player', {

	init: function() {
		this.requires('Actor, Color, Grid, Solid')
			.color('rgb(20,75,40)')
			.attr({
				z: 2
			});
	},

	setTeam: function(team) {
		if(team === "white") {
			this.color(CapColors.white);
		} else {
			this.color(CapColors.black);
		}

		return this;

	}

});

Crafty.c('PlayerCharacter', {

	init: function() {
		this.requires('Player, Multiway, Collision')
			.multiway(4, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180})
			.color('rgb(20,75,40)')
			.postMovement()
			.pcCollisions()
			.disableOnChat();
	},

	postMovement: function() {

		this.bind('Moved', function() {
			socket.emit("move", {x: this.x , y: this.y});
		});

		return this;

	},

	pcCollisions: function() {
		this.onHit('Solid', this.stopMovement);
		return this;
	},

	stopMovement: function() {

		this._speed = 0;
		if (this._movement) {
			this.x -= this._movement.x;
			this.y -= this._movement.y;
		}

		return this;

	},

	disableOnChat: function() {

		var pc = this;

		// when the user clicks in the chat message box
		// prevent arrow keys from moving the character
		$('input#chatMsg').focus(function() {
			pc.disableControl();
		});

		// when the user unclicks from the chat message box
		// enable the user to move the character
		$('input#chatMsg').blur(function() {
			pc.enableControl();
		});

		return this;

	}

});

/* **********************************************
     Begin scenes.js
********************************************** */

/* global Game:true, Crafty, io, socket:true, Player, player:true, remotePlayers:true, addChatMsg, _, addToWaitingRoom, CapColors, mapDesignMode, Maps */

Crafty.scene('Start', function() {

	// show start scene
	$('.custom-scene').hide();
	$('#start').show();

	// when the username form is submitted
	$('#username-form').submit(function(e) {

		// prevents the form from doing its default thing
		// (which might be reloading the page)
		e.preventDefault();

		// grab the username and sanitize it a little
		// (because you know some cs dork is gonna try
		// to mess up our game by entering some weird shit)
		var username = encodeURI($('input#username').val().trim());

		// if the username is empty, stop here
		if(!username) { return; }

		// send the username to the server
		socket.emit("new player", {name: username});

		// save the username locally
		player.username = username;

		// switch to the Waiting Room scene
		Crafty.scene('WaitingRoom');

	});

});

Crafty.scene('WaitingRoom', function() {

	// show waiting room
	$('.custom-scene').hide();
	$('#waiting-room').show();

	// when user selects a team
	$('#waiting-room input[type=submit]').click(function(e) {

		e.preventDefault();

		// post team selection to server
		var selectedTeam = $(this).attr('id');
		socket.emit("team assignment", {team: selectedTeam});

		// add player to the selected team
		player.team = selectedTeam;
		addToWaitingRoom(player, 'self');

	});

});

Crafty.scene('GameInProgress', function() {
	// show game in progress scene
	$('.custom-scene').hide();
	$('#game-in-progress').show();
});

Crafty.scene('Game', function() {

	// show the game and the stuff below it (teammates, chat)
	$('.custom-scene').hide();
	if(!mapDesignMode) { $('#below-game').show(); }

	// add the "stage" to the canvas
	Crafty.map.insert(Crafty.e('StageBg').at(0,0));

	// add edges to the map
	for (var x = 0; x < Game.map_grid.width; x++) {
		for (var y = 0; y < Game.map_grid.height; y++) {
			var at_edge = x === 0 || x === Game.map_grid.width - 1 || y === 0 || y === Game.map_grid.height - 1;
			if (at_edge) {
				Crafty.e('Edge').at(x, y);
			}
		}
	}

	// add teammates to free list
	var freeTeammates = $('#free-teammates ul');
	_.each(remotePlayers, function(thisPlayer) {
		if(thisPlayer.team === player.team) {
			freeTeammates.append('<li id="player-' + thisPlayer.id + '">' + thisPlayer.username + '</li>');
		}
	});

	// set map
	Maps.map1();

	// initialize player positions
	var initPlayer;
	socket.on("init player", function(data) {

		// player character (that's you!)
		if(data.id === player.id) {
			player.entity = Crafty.e('PlayerCharacter')
									.at(data.x, data.y)
									.setTeam(player.team);
			initPlayer = player;
			Crafty.viewport.follow(player.entity, 20, 20);
		}

		// the other players
		else {
			initPlayer = remotePlayers[data.id];
			initPlayer.entity = Crafty.e('Player')
										.at(data.x, data.y)
										.setTeam(initPlayer.team);
		}

	});

	// chat message submitted
	$('form#chatForm').submit(function(e) {

		e.preventDefault();

		// get chat message
		var chatMsg = $('input#chatMsg').val();

		// add chat message to chat box
		$('input#chatMsg').val("");
		addChatMsg(chatMsg, player.username);

		// post chat message to server
		socket.emit("chat msg", chatMsg);

	});

});